parameters:
- name: state
  default: "success"

# Provides PR feedback when invoked from within a PR-triggered pipeline (NOT a CI-triggered pipeline!)
# Uses undocumented pipeline variable System.PullRequest.SourceCommitId - see https://github.com/MicrosoftDocs/azure-devops-docs/issues/4588 (or call env during a pipeline to see it)
# in order to get the correct commit hash (Build.SourceVersion gives you the hash of the commit in the PR-merge branch, not the commit in the feature branch...)
#
# You need to push status checks to the commit in the original feature branch for them to show in GitHub..
# If you want to provide feedback to a commit during a CI build, use Build.SourceVersion instead
steps:
- bash: |
    commitHash="$(System.PullRequest.SourceCommitId)"
    commitStatusUrl="$(GitHubStatusApiUrl)/$commitHash"
    targetUrl="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=results"
    postData="{\"state\": \"${{ parameters.state }}\", \"context\": \"checkov-tests\", \"description\": \"azure-devops-pipeline\", \"target_url\": \"$targetUrl\"}"
    echo "Posting to $commitStatusUrl"
    curl -u $GITHUB_USERNAME:$GITHUB_TOKEN -H "Content-Type: application/json" -X POST -d "$postData" $commitStatusUrl
  env:
    # Explicitly map variables as env variables - this is best practice for encrypted secret variables (like GitHubToken)
    GITHUB_TOKEN: $(GitHubToken)
    GITHUB_USERNAME: $(GitHubUsername)
  displayName: Provide GitHub Feedback